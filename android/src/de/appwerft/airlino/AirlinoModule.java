/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.airlino;

import java.net.InetAddress;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.app.Activity;
import android.content.Context;
import android.net.nsd.NsdManager;
import android.net.nsd.NsdServiceInfo;
import android.provider.Settings;

@Kroll.module(name = "Airlino", id = "de.appwerft.airlino")
public class AirlinoModule extends KrollModule {
	private static final String LCAT = "BONJOUR ðŸ˜ˆ";
	Context ctx;
	NsdManager nsdManager;
	private KrollFunction onFoundCallback = null;
	private KrollFunction onLostCallback = null;
	String DNSTYPE = "_dockset._tcp.";
	String host = null;
	String port = null;
	String endpoint = null;
	int scanTimeout = 10;
	public NsdManager.ResolveListener resolveListener;
	public NsdManager.DiscoveryListener discListener = null;

	public AirlinoModule() {
		super();
		resolveListener = new NsdManager.ResolveListener() {
			@Override
			public void onResolveFailed(NsdServiceInfo serviceInfo,
					int errorCode) {
				// Called when the resolve fails. Use the error
				// code to debug.
				Log.e(LCAT, "Resolve failed" + errorCode);
			}

			@Override
			public void onServiceResolved(NsdServiceInfo serviceInfo) {
				Log.e(LCAT, "Resolve Succeeded. " + serviceInfo);
				if (onFoundCallback != null) {
					KrollDict event = parseNsdServiceInfo(serviceInfo);
					onFoundCallback.call(getKrollObject(), event);

				}
			}
		};
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}

	public void onDestroy() {
		if (discListener != null)
			nsdManager.stopServiceDiscovery(discListener);
	}

	@Kroll.method
	public void connect(KrollDict opt) {
		Object fcallback;
		Object lcallback;

		if (opt.containsKeyAndNotNull("onSuccess")) {
			fcallback = opt.get("onSucces");
			if (fcallback instanceof KrollFunction) {
				onFoundCallback = (KrollFunction) fcallback;
			}
		}
		if (opt.containsKeyAndNotNull("onError")) {
			lcallback = opt.get("onFound");
			if (lcallback instanceof KrollFunction) {
				onLostCallback = (KrollFunction) lcallback;
			}
		}
		if (opt.containsKeyAndNotNull("timeout")) {
			scanTimeout = opt.getInt("timeout");
		}
		this.initializeDiscoveryListener();

	}

	private void stopDiscoveryListener() {
		if (discListener == null)
			return;
		nsdManager.stopServiceDiscovery(discListener);
	}

	private void initializeDiscoveryListener() {
		ctx = TiApplication.getInstance().getApplicationContext();
		nsdManager = (NsdManager) ctx.getSystemService(Context.NSD_SERVICE);
		Log.d(LCAT, "initializeDiscoveryListener = " + nsdManager.toString());
		discListener = new NsdManager.DiscoveryListener() {
			@Override
			public void onDiscoveryStarted(String regType) {
			}

			@Override
			public void onServiceFound(NsdServiceInfo service) {
				nsdManager.resolveService(service, resolveListener);
			}

			@Override
			public void onServiceLost(NsdServiceInfo service) {
				if (onLostCallback != null)
					onLostCallback.call(getKrollObject(),
							parseNsdServiceInfo(service));
			}

			@Override
			public void onDiscoveryStopped(String serviceType) {
				Log.i(LCAT, "Discovery stopped: " + serviceType);
			}

			@Override
			public void onStartDiscoveryFailed(String serviceType, int errorCode) {
				Log.e(LCAT, "Discovery failed: Error code:" + errorCode);
				nsdManager.stopServiceDiscovery(this);
			}

			@Override
			public void onStopDiscoveryFailed(String serviceType, int errorCode) {
				Log.e(LCAT, "Discovery failed: Error code:" + errorCode);
				nsdManager.stopServiceDiscovery(this);
			}
		};
		nsdManager.discoverServices(DNSTYPE, NsdManager.PROTOCOL_DNS_SD,
				discListener);
		new android.os.Handler().postDelayed(new Runnable() {
			public void run() {
				stopDiscoveryListener();
				Log.d(LCAT, "discoveryService ended after " + scanTimeout
						+ " seconds.");
			}
		}, scanTimeout * 1000);
	}

	private KrollDict parseNsdServiceInfo(NsdServiceInfo so) {
		endpoint = "http://";
		KrollDict dict = new KrollDict();
		Log.d(LCAT, so.toString());
		InetAddress address = so.getHost();
		if (address != null) {
			dict.put("ip", address.getHostAddress());
			endpoint += address.getHostAddress();
		}
		dict.put("port", so.getPort());
		endpoint += (":" + so.getPort() + "/api/v15/radio.action");
		dict.put("name", so.getServiceName());
		dict.put("type", so.getServiceType());
		dict.put("endpoint", endpoint);
		Log.d(LCAT, dict.toString());
		return dict;
	}
}
